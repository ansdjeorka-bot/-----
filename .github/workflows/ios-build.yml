name: iOS Build

# 수동 트리거 또는 push 시 실행
on:
  workflow_dispatch:  # GitHub에서 수동으로 실행 가능
  push:
    branches: [ main, master ]

jobs:
  build-ios:
    runs-on: macos-latest  # macOS에서만 iOS 빌드 가능
    
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20'  # Node.js 20 사용
        cache: 'npm'
        
    - name: 프로젝트 정보 확인
      run: |
        echo "Node.js 버전:"
        node --version
        echo "npm 버전:"
        npm --version
        echo "현재 디렉토리:"
        pwd
        echo "파일 목록:"
        ls -la
        
    - name: 의존성 설치
      run: npm install
      
    - name: 웹 빌드
      run: npm run build
      
    - name: Capacitor 버전 확인
      run: npx cap --version
      
    - name: Capacitor iOS 플랫폼 동기화
      run: |
        if [ -d "ios" ]; then
          echo "iOS 폴더가 이미 존재합니다. 동기화만 진행합니다."
          npx cap sync ios
        else
          echo "iOS 폴더가 없습니다. 새로 추가합니다."
          npx cap add ios
        fi
        
    - name: iOS 프로젝트 정보 확인
      run: |
        if [ -d "ios" ]; then
          echo "iOS 폴더 내용:"
          ls -la ios/
          if [ -d "ios/App" ]; then
            echo "iOS App 폴더 내용:"
            ls -la ios/App/
          fi
        else
          echo "iOS 폴더가 생성되지 않았습니다."
        fi

    # 🎯 iOS 빌드 시작 (자동 서명 방식)
    - name: iOS Bundle ID 설정
      run: |
        cd ios/App
        # Bundle ID를 고유하게 설정 (GitHub 사용자명 포함)
        BUNDLE_ID="com.github.${{ github.repository_owner }}.visitapp"
        echo "Bundle ID: $BUNDLE_ID"
        
        # Info.plist에서 Bundle ID 업데이트
        /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" App/Info.plist
        
        # project.pbxproj에서 Bundle ID 업데이트
        sed -i '' "s/com\.clientvisit\.manager/$BUNDLE_ID/g" App.xcodeproj/project.pbxproj
        
    - name: iOS 자동 서명 빌드 (Archive)
      run: |
        cd ios/App
        echo "iOS 빌드 시작..."
        
        xcodebuild clean archive \
          -workspace App.xcworkspace \
          -scheme App \
          -archivePath App.xcarchive \
          -configuration Release \
          -destination generic/platform=iOS \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM="" \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          -allowProvisioningUpdates
          
    - name: IPA 내보내기 (개선된 방법)
      run: |
        cd ios/App
        echo "IPA 내보내기 시작..."
        
        # 더 간단한 ExportOptions.plist 생성
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>stripSwiftSymbols</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # Archive에서 직접 IPA 추출 시도
        echo "방법 1: xcodebuild export 시도..."
        if xcodebuild -exportArchive \
          -archivePath App.xcarchive \
          -exportPath ./build \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates; then
          echo "✅ xcodebuild export 성공"
        else
          echo "❌ xcodebuild export 실패, 대안 방법 시도..."
          
          # 방법 2: Archive에서 직접 앱 파일 복사
          echo "방법 2: Archive에서 직접 추출..."
          mkdir -p ./build
          
          # Archive 내부 구조 확인
          echo "Archive 내용:"
          find App.xcarchive -name "*.app" -type d
          
          # .app 파일을 .ipa로 변환
          APP_PATH=$(find App.xcarchive -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            echo "App 파일 발견: $APP_PATH"
            
            # Payload 폴더 생성 및 앱 복사
            mkdir -p ./build/Payload
            cp -r "$APP_PATH" ./build/Payload/
            
            # IPA 파일 생성
            cd ./build
            zip -r "App.ipa" Payload/
            cd ..
            
            echo "✅ 수동 IPA 생성 완료"
            ls -la ./build/
          else
            echo "❌ .app 파일을 찾을 수 없습니다"
          fi
        fi
        
        # 최종 결과 확인
        echo "=== 최종 빌드 결과 ==="
        find ./build -name "*.ipa" -exec ls -la {} \; || echo "IPA 파일 없음"
        
    - name: IPA 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: iOS-App
        path: ios/App/build/*.ipa
        retention-days: 7
        
    - name: 빌드 결과 확인
      run: |
        echo "🎉 iOS 빌드 완료!"
        echo "Artifacts에서 IPA 파일을 다운로드할 수 있습니다."
        cd ios/App
        if ls ./build/*.ipa 1> /dev/null 2>&1; then
          echo "✅ IPA 파일 생성 성공"
          ls -la ./build/
          echo "파일 크기:"
          du -h ./build/*.ipa
        else
          echo "❌ IPA 파일 생성 실패"
        fi
